package algo;

import java.util.*;

// Пункты, помеченные * сделайте отдельно.
//
// 1. Добавьте в класс LinkedList метод удаления одного узла по его значению.
// 2. Добавьте в класс LinkedList метод удаления всех узлов по конкретному значению.
// 3. Добавьте в класс LinkedList метод очистки всего содержимого (создание пустого списка).
// 4. Добавьте в класс LinkedList метод поиска всех узлов по конкретному значению
//      (возвращается список/массив найденных узлов).
// 5. Добавьте в класс LinkedList метод вычисления длины списка.
// 6. Добавьте в класс LinkedList метод вставки узла после заданного узла.
//* 7. Напишите проверочные тесты для каждого из предыдущих заданий.
//
//* 8. Напишите функцию, которая получает на вход два связанных списка, состоящие из целых значений,
// и если их длины равны, возвращает список, каждый элемент которого равен сумме соответствующих элементов входных списков.
// Рекомендации по тестированию.
// Проверяйте случаи, когда список пустой, содержит много элементов и один элемент: как в таких ситуациях
// будет работать удаление одного и нескольких элементов, вставка, поиск. Особое внимание уделите корректности
// полей head и tail после всех этих операций.

// однонаправленный!!!
public class LinkedList {
    public Node head;
    public Node tail;

    public LinkedList() {
        head = null;
        tail = null;
    }

    public void addInTail(Node item) {
        if (this.head == null) { // случай когда список пуст
            this.head = item;
        } else {
            // если список не пуст, то старый хвост будет указывать на новый айтем
            this.tail.next = item;
        }   // а новым хвостом будет новый айтем
        this.tail = item;
    }

    public Node find(int value) {
        // начинаем поиск с головы
        Node node = this.head;
        // пока не дойдём до конца списка
        while (node != null) {
            if (node.value == value) {
                //  или пока не найдём и вернём искомое
                return node;
            }
            node = node.next;
        }
        // если не найдём - вернём налл
        return null;
    }

    public ArrayList<Node> findAll(int _value) {
        ArrayList<Node> nodes = new ArrayList<>();
        // здесь будет ваш код поиска всех узлов
        return nodes;
    }

    // здесь будет ваш код удаления одного узла по заданному значению
    public boolean remove(int _value) {
        // нужно знать предыдущий узел для перелинковки!

        // начинаем поиск удаляемого с головы
        Node node = this.head;
        // тут будем сохранять предыдущую ноду
        Node nodePrevious = null;

        // ищем пока не дойдём до конца списка
        while (node != null) {
            //  или пока не найдём и осуществим удаление
            if (node.value == _value) {
                // случай когда узел единственный
                // случай когда узел это голова
                // случай когда узел это хвост

                // случай когда узел посреди других узлов


                return true;
            }
            node = node.next;
        }
        // если не найдём - вернём налл
        return false;

    }

    public void removeAll(int _value) {
        // здесь будет ваш код удаления всех узлов по заданному значению
    }

    public void clear() {
        // здесь будет ваш код очистки всего списка
    }

    public int count() {
        return 0; // здесь будет ваш код подсчёта количества элементов в списке
    }

    public void insertAfter(Node _nodeAfter, Node _nodeToInsert) {
        // здесь будет ваш код вставки узла после заданного

        // если _nodeAfter = null ,
        // добавьте новый элемент первым в списке
    }
}

class Node {
    public int value;
    public Node next;

    public Node(int _value) {
        value = _value;
        next = null;
    }
}