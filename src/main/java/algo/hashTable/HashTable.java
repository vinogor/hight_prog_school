package algo.hashTable;

//  В классе HashTable требуется реализовать четыре метода:
//  - хэш-функцию hash_fun(value), которая по входному значению вычисляет индекс слота;
//  - функцию поиска слота seek_slot(value), которая по входному значению сперва рассчитывает
//    индекс слота хэш-функцией, а затем отыскивает подходящий слот с учётом коллизий, или возвращает неудачу, если это не удалось;
//  - put(value), который помещает значение value в слот, вычисляемый с помощью функции поиска;
//  - find(value), который проверяет, имеется ли в слотах указанное значение, и возвращает либо слот, либо признак неудачи.
//
//  Напишите тесты, которые проверяют работу этих четырёх методов.

public class HashTable {
    public int size;       // размер хэш-таблицы, желательно простое число (17, 19)
    public int step;       // шаг поиска свободного слота, например 3 (а почему не один?!)
    public String[] slots; // массив со слотами, прописать фиксированный размер!!!

    public HashTable(int sz, int stp) {
        size = sz;
        step = stp;
        slots = new String[size];
        for (int i = 0; i < size; i++) slots[i] = null;
    }

    public int hashFun(String value) {
        // всегда возвращает корректный индекс слота
        return 0;
    }

    public int seekSlot(String value) {
        // находит индекс пустого слота для значения, или -1
        return -1;
    }

    public int put(String value) {
        // записываем значение по хэш-функции

        // возвращается индекс слота или -1
        // если из-за коллизий элемент не удаётся разместить
        return -1;
    }

    public int find(String value) {
        // находит индекс слота со значением, или -1
        return -1;
    }
}